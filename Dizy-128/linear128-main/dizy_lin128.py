from gurobipy import *import math milpredpos = [[0, 0, -1, 1, -1, -1, -1, -1, -1, 1, + 5 ],[-1, -1, -1, -1, 0, -1, -1, 1, 1, -1, + 6 ],[-1, 1, 0, -1, 0, 1, 0, -1, 1, -1, + 3 ],[3, -1, 0, -1, 0, 3, 3, -1, 3, 2, + 0 ],[-1, -2, -2, 2, -1, 1, -1, -2, -2, 1, + 9 ],[-2, 1, -2, -1, 2, -2, -1, -2, -1, -1, + 10 ],[-3, 2, 3, -1, -3, -1, -2, -3, -1, -2, + 13 ],[0, 1, -1, -1, 0, 1, -1, -1, -1, 1, + 4 ],[-2, 7, 3, -2, 6, -3, 4, 7, 6, 1, + 0 ],[1, 0, 1, 1, 0, 1, 1, 1, -1, 0, + 0 ],[1, 0, -1, -1, 0, 1, 1, 1, -1, -1, + 3 ],[-1, 1, -1, 0, 0, 1, 1, 2, 1, 2, + 0 ],[0, 0, 0, 1, 2, -1, -1, -2, 2, 2, + 2 ],[-1, -1, 1, 1, -1, 0, -1, 1, 1, 0, + 3 ],[7, 6, 7, 5, 7, -1, -2, -1, -1, -2, + 0 ],[2, 2, 1, -2, -2, 1, 2, -2, -2, -1, + 7 ],[1, -2, -1, 2, -2, 1, -1, 1, 2, -1, + 5 ],[-1, -1, -1, 0, 0, 3, 3, 3, 2, 2, + 0 ],[1, 2, 1, -2, -2, 2, -1, 2, 1, -1, + 4 ],[1, 2, 0, 2, 1, 1, -2, 2, -2, 1, + 2 ],[2, -2, 1, -2, 2, 1, 0, -2, -2, -1, + 7 ],[-2, -2, 2, 1, 2, -2, -1, -1, 2, 0, + 6 ],[-1, -1, 2, 0, 1, -1, -2, 1, 1, 2, + 3 ],[0, -2, -1, 0, -2, -1, 2, 1, 2, -2, + 6 ],[-2, 1, 3, 3, -2, -2, 3, -1, -1, 3, + 5 ],[1, 1, 2, 1, 0, -1, -1, 2, 2, 1, + 0 ],[-1, -3, 3, -3, -2, 2, -2, -1, -1, 2, + 10 ],[-2, 2, -1, 2, -2, 1, 1, -1, -2, -2, + 8 ],[2, 1, -2, 0, -2, -2, -2, -1, -1, -2, + 10 ],[3, 0, 3, -1, -1, 2, 3, 3, -1, 3, + 0 ],[0, 1, 1, 1, 0, 1, -1, 0, -1, 1, + 1 ],[3, 3, 3, -2, -2, 3, 1, 1, 3, 3, + 0 ],[2, -2, -2, 1, 2, -1, -2, -1, 2, -1, + 7 ],[2, 3, -1, -1, 3, -3, 2, 3, 1, -1, + 3 ],[-1, -2, 0, -2, 2, 2, -2, 1, 1, -2, + 7 ],[0, 2, 2, 1, 1, 1, 1, 2, 2, -2, + 0 ],[1, 2, -2, -1, -2, -1, -1, 1, -1, -2, + 8 ],[1, 0, 2, 2, 1, -2, 1, -1, -1, 2, + 2 ],[2, -1, 1, 2, -1, 1, -2, -1, 2, -2, + 5 ],[1, -1, -1, 0, 0, 2, 1, 1, 2, 1, + 0 ],[-2, -1, 0, -2, 2, 2, -2, 2, -1, -1, + 7 ],[3, 4, 6, 7, 5, -4, 2, -3, 1, 2, + 0 ],[0, 0, 0, -1, -1, 1, -1, -1, 1, 1, + 3 ],[-2, -2, 1, 2, 1, 1, 2, -2, 1, -2, + 6 ],[1, 2, 2, 0, 2, -2, -1, 1, -2, -1, + 4 ],[-2, -1, 2, -2, -1, 1, 2, 1, -2, -2, + 8 ],[1, 3, -1, 2, -1, -1, 3, 1, 2, 3, + 0 ],[2, -2, 2, -2, -1, -2, -1, 1, 1, -1, + 7 ],[-1, -1, 2, 2, 1, -1, 1, -2, -1, 2, + 4 ],[-3, 1, -3, -3, -3, -1, 2, 1, -2, 3, + 12 ],[2, 2, -2, 1, -2, -1, 0, -2, 1, -2, + 7 ],[3, 1, 0, 2, 3, 3, -2, -1, -1, -3, + 4 ],[2, 1, -3, -3, 2, -2, 1, -1, -3, 2, + 9 ],[1, 1, 0, 0, 0, -1, 1, 1, -1, -1, + 2 ],[2, -2, 1, 2, -2, 1, 2, -1, -2, -1, + 6 ],[1, -2, -2, 2, 1, 2, -1, -2, -1, 1, + 6 ],[-1, -1, -2, 1, -2, -1, 1, -1, 2, -1, + 7 ],[-2, -2, -2, 2, -1, 1, 1, 2, 0, -1, + 6 ],[7, 3, -2, 6, -2, 1, 7, -3, 6, 4, + 0 ],[-2, 2, -2, 2, 1, -1, -1, 1, 2, -2, + 6 ],[-2, -3, 3, 1, -3, -2, -1, 1, -2, -3, + 13 ],[1, -2, 0, -2, -1, 1, -2, 2, -2, 1, + 7 ],[-2, 2, 1, -2, 2, 2, 2, -1, -1, -1, + 5 ],[-1, -1, -2, -2, 1, -1, 1, -2, -2, 2, + 9 ],[-1, -2, -2, 2, 2, -1, 1, -1, -2, -2, + 9 ],[-2, -2, 1, -1, 1, -1, 2, 1, -2, -1, + 7 ],[-2, 3, -1, 3, -2, 1, -2, 3, -2, 1, + 6 ],[-1, 1, 2, 0, -1, -2, -1, 2, 1, 2, + 3 ],[0, 0, 1, -1, -1, -1, -1, -1, -1, 1, + 5 ],[-1, 2, 1, -2, -2, 1, -1, 1, 2, -2, + 6 ],[2, -2, -1, 1, -2, -2, -1, 1, -2, 2, + 8 ],[1, -1, -2, -2, -1, -1, 2, -2, -2, 1, + 9 ],[0, 0, 1, 0, 1, -1, 1, -1, 1, -1, + 2 ],[-3, 1, -3, 2, 2, 1, 2, 2, -1, 2, + 4 ],[-1, -2, -2, 0, 2, -2, -1, 1, -2, -1, + 9 ],[-1, -2, -3, -2, -3, -3, 2, -1, 1, -3, + 15 ],[-2, -1, 0, -1, -2, 2, -1, -2, -1, -2, + 10 ]]permutedlist = [[0, 2, 18, 92], [1, 8], [2, 88], [3, 10, 94], [4, 4, 91], [5, 7, 13, 17, 87, 97], [6, 13], [7, 93], [8, 15, 99], [9, 14, 96], [10, 2, 12, 18, 82, 92], [11, 18], [12, 98], [13, 0, 84], [14, 19, 81], [15, 13, 17, 87], [16, 3], [17, 83], [18, 5, 89], [19, 9, 90], [20, 13, 87], [21, 9], [22, 84], [23, 11, 83], [24, 8, 95], [25, 18, 92], [26, 14], [27, 89], [28, 16, 88], [29, 7, 13, 17, 80, 87, 97], [30, 13, 17, 87, 97], [31, 19], [32, 94], [33, 1, 93], [34, 2, 12, 18, 82, 85, 92], [35, 2, 18, 82, 92], [36, 4], [37, 99], [38, 6, 98], [39, 3, 86], [40, 22, 38, 112], [41, 28], [42, 108], [43, 30, 114], [44, 24, 111], [45, 27, 33, 37, 107, 117], [46, 33], [47, 113], [48, 35, 119], [49, 34, 116], [50, 22, 32, 38, 102, 112], [51, 38], [52, 118], [53, 20, 104], [54, 39, 101], [55, 33, 37, 107], [56, 23], [57, 103], [58, 25, 109], [59, 29, 110], [60, 33, 107], [61, 29], [62, 104], [63, 31, 103], [64, 28, 115], [65, 38, 112], [66, 34], [67, 109], [68, 36, 108], [69, 27, 33, 37, 100, 107, 117], [70, 33, 37, 107, 117], [71, 39], [72, 114], [73, 21, 113], [74, 22, 32, 38, 102, 105, 112], [75, 22, 38, 102, 112], [76, 24], [77, 119], [78, 26, 118], [79, 23, 106], [80, 42, 58, 132], [81, 48], [82, 128], [83, 50, 134], [84, 44, 131], [85, 47, 53, 57, 127, 137], [86, 53], [87, 133], [88, 55, 139], [89, 54, 136], [90, 42, 52, 58, 122, 132], [91, 58], [92, 138], [93, 40, 124], [94, 59, 121], [95, 53, 57, 127], [96, 43], [97, 123], [98, 45, 129], [99, 49, 130], [100, 53, 127], [101, 49], [102, 124], [103, 51, 123], [104, 48, 135], [105, 58, 132], [106, 54], [107, 129], [108, 56, 128], [109, 47, 53, 57, 120, 127, 137], [110, 53, 57, 127, 137], [111, 59], [112, 134], [113, 41, 133], [114, 42, 52, 58, 122, 125, 132], [115, 42, 58, 122, 132], [116, 44], [117, 139], [118, 46, 138], [119, 43, 126], [120, 62, 78, 152], [121, 68], [122, 148], [123, 70, 154], [124, 64, 151], [125, 67, 73, 77, 147, 157], [126, 73], [127, 153], [128, 75, 159], [129, 74, 156], [130, 62, 72, 78, 142, 152], [131, 78], [132, 158], [133, 60, 144], [134, 79, 141], [135, 73, 77, 147], [136, 63], [137, 143], [138, 65, 149], [139, 69, 150], [140, 73, 147], [141, 69], [142, 144], [143, 71, 143], [144, 68, 155], [145, 78, 152], [146, 74], [147, 149], [148, 76, 148], [149, 67, 73, 77, 140, 147, 157], [150, 73, 77, 147, 157], [151, 79], [152, 154], [153, 61, 153], [154, 62, 72, 78, 142, 145, 152], [155, 62, 78, 142, 152], [156, 64], [157, 159], [158, 66, 158], [159, 63, 146]]ROUNDS = 8numberOfSbox = 32inputSize = 160dummycount =0filename = 'dizy-128-' + str(ROUNDS) +'.lp'file = open(filename, 'w+')filename2 = 'dizy-128-time' + str(ROUNDS) +'.txt'file2 = open(filename2, 'w+')def objective():    file.write("Minimize\n")    for i in range(0,(ROUNDS)*numberOfSbox):        file.write("A" + str(int(i/numberOfSbox)) + "_" + str(i%numberOfSbox))        if (i != ((ROUNDS)*numberOfSbox)-1):            file.write(" + ")    file.write("\n")def nonzeroinput():    file.write("Subject to\n")    for i in range(inputSize):        file.write("x0_" + str(i))        if(i != (inputSize-1)):            file.write(' + ')    file.write(" >= 1 \n")    def printvariables():    file.write("Binary\n")    for i in range (ROUNDS):       for j in range(numberOfSbox):           file.write("A" + str(i) + "_" +str(j) + "\n")    for i in range (ROUNDS+1):        for j in range(inputSize):            file.write("x" + str(i) + "_" + str(j) + "\n")    for i in range (ROUNDS):        for j in range(inputSize):            file.write("y" + str(i) + "_" + str(j) + "\n")    for i in range (ROUNDS):        for j in range(dummycount):            file.write("d" + str(i) + "_" + str(j) + "\n")                                    def printreducedequations(inputList,outputList,roundCount,activityofSbox):    inputRevList = inputList    outputRevList = outputList    reducedEqn = inputRevList + outputRevList    for x in range(5):        file.write("+ 5 x" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" ")        else:            file.write(" - ")    for x in range(5):        file.write("y" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" - ")        else:            file.write(" >= 0 \n")                for x in range(5):        file.write("+ 5 y" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" ")        else:            file.write(" - ")    for x in range(5):        file.write("x" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" - ")        else:            file.write(" >= 0 \n")    for i in range(len(milpredpos)):        for j in range(len(inputList)):            if(milpredpos[i][j] > 0):                file.write(" + " + str(milpredpos[i][j]) + " x" + str(roundCount) + "_" +  str(reducedEqn[j]))            if(milpredpos[i][j] < 0):                file.write(" " + str(milpredpos[i][j]) + " x" + str(roundCount) + "_" +  str(reducedEqn[j]))        for j in range(len(inputList)):            if(milpredpos[i][j + len(inputList)] > 0):                file.write(" + " + str(milpredpos[i][j + len(inputList)]) + " y" + str(roundCount) + "_" +  str(reducedEqn[j]))            if(milpredpos[i][j+ len(inputList)] < 0):                file.write(" " + str(milpredpos[i][j + len(inputList) ]) + " y" + str(roundCount) + "_" +  str(reducedEqn[j]))        if(milpredpos[i][-1] > 0):            file.write(" >= -" + str(milpredpos[i][-1]) + " \n")        if(milpredpos[i][-1] < 0):            file.write(" >= + " + str(-1 * milpredpos[i][-1]) + " \n")        if(milpredpos[i][-1] == 0):            file.write(" >= 0 \n")        def printactivityofsbox(inputList,roundCount,sboxCount):    for i in range(len(inputList)):        file.write("x" + str(roundCount) + "_" + str(inputList[i]))        if(i != len(inputList)-1):           file.write(" + ")    file.write(" - " + "A" + str(roundCount) + "_" + str(sboxCount) + " >= 0 \n")    for i in range(len(inputList)):        file.write("A" + str(roundCount) + "_" + str(sboxCount) + " - x" + str(roundCount) + "_" + str(inputList[i]) + " >= 0 \n")def printmds(roundCount):    global dummycount    dummycount = 0    for i in range (len(permutedlist)):        if len(permutedlist[i]) == 8:            file.write("x"    + str(roundCount+1)+ "_" + str(permutedlist[i][0]))            for j in range (1,len(permutedlist[i])):                file.write(" + y" + str(roundCount)  + "_" + str(permutedlist[i][j]))            for j in range (1,4):               file.write(" -" + str(pow(2,j)) + " d"+ str(roundCount)  + "_" + str(dummycount))               dummycount = dummycount + 1             file.write(" = 0\n")                 elif len(permutedlist[i]) >= 4 and len(permutedlist[i]) <= 7 :            file.write("x"    + str(roundCount+1)+ "_" + str(permutedlist[i][0]))            for j in range (1,len(permutedlist[i])):                file.write(" + y" + str(roundCount)  + "_" + str(permutedlist[i][j]))            for j in range (1,3):               file.write(" -" + str(pow(2,j)) + " d"+ str(roundCount)  + "_" + str(dummycount))               dummycount = dummycount + 1             file.write(" = 0\n")                   elif len(permutedlist[i]) == 3:            file.write("x"    + str(roundCount+1)+ "_" + str(permutedlist[i][0]))            for j in range (1,len(permutedlist[i])):                file.write(" + y" + str(roundCount)  + "_" + str(permutedlist[i][j]))            for j in range (1,2):               file.write(" -" + str(pow(2,j)) + " d"+ str(roundCount)  + "_" + str(dummycount))                dummycount = dummycount + 1            file.write(" = 0\n")          elif len(permutedlist[i]) == 2:            file.write("x" + str(roundCount+1) + "_" + str(permutedlist[i][0]) + " -1 y" + str(roundCount) + "_" + str(permutedlist[i][1]) + " = 0\n")            def restricter(ROUNDS):    for i in range (ROUNDS):       for j in range(numberOfSbox):           file.write("+ A" + str(i) + "_" +str(j) + " ")           if (j==(numberOfSbox-1)):               file.write(" <= 4\n")       objective()nonzeroinput()plaintext = [i for i in range(0, inputSize)]for i in range (0,ROUNDS):    for j in range (0, numberOfSbox):        inputList =  [plaintext[5 * j], plaintext[(5 * j) + 1], plaintext[(5 * j) + 2], plaintext[(5 * j) + 3], plaintext[(5 * j) + 4]]        outputList = [plaintext[5 * j], plaintext[(5 * j) + 1], plaintext[(5 * j) + 2], plaintext[(5 * j) + 3], plaintext[(5 * j) + 4]]        printactivityofsbox(inputList, i, j)        printreducedequations(inputList,outputList, i,j)    printmds(i)          restricter(ROUNDS)printvariables()file.close()envname = "dizy-" + str(ROUNDS) + ".log"env = Env(envname)m = read(filename,env)  obj = m.getObjective()m.optimize()time = int(m.Runtime)time = math.floor(time)file2.write(str(time) + " seconds \n")for v in m.getVars():    if v.x == 1:        print(v)        file2.write(str(v) + "\n")file2.close()