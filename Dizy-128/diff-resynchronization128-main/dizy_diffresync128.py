from gurobipy import *import math milpredpos = [[0, 0, 1, -1, -1, 0, -1, -1, 1, -1, + 4 ],[-2, 1, 2, -1, -3, -1, 3, 2, -3, -3, + 10 ],[-2, -1, -1, 1, 2, -1, 2, 0, 1, -1, + 4 ],[1, -1, 0, -1, 1, 0, 1, 1, 1, 0, + 1 ],[-3, 1, -2, -2, -1, -3, 1, -2, -3, -2, + 15 ],[-2, -1, -2, 1, 0, -2, 2, 2, 1, -2, + 7 ],[2, -1, -1, -2, -1, 2, -1, 2, -2, -2, + 8 ],[-1, 1, -1, -1, -1, 1, 0, 0, 1, 0, + 3 ],[-1, -1, 2, -2, 0, 0, 1, 2, 2, 2, + 2 ],[-2, -1, 1, 1, -2, 2, 2, -1, 2, -1, + 5 ],[1, -1, -1, -1, 1, -1, -2, 2, -2, 1, + 6 ],[-1, 3, 2, 2, 2, 0, -1, 3, 1, -1, + 0 ],[-2, -1, 1, 1, -1, -2, 2, -1, -2, 1, + 7 ],[-2, -1, 2, 1, 2, -2, 0, 1, -2, 2, + 5 ],[2, 2, 2, 1, 1, -1, 1, -1, 0, 0, + 0 ],[2, 1, -2, -1, 1, 2, 1, -2, -2, 0, + 5 ],[-1, 1, 1, 2, -2, 1, -2, -2, -2, -2, + 9 ],[0, -1, -1, -1, 0, -1, 1, -1, -1, -1, + 6 ],[1, -2, 2, -2, -1, 0, -2, 1, -1, -2, + 8 ],[2, 1, 1, -1, 2, -2, 1, -2, 1, 0, + 3 ],[2, 1, 0, -2, 1, 2, 1, 2, 2, 0, + 0 ],[-1, 2, 2, -3, -1, -1, -3, -2, -3, 3, + 11 ],[1, -1, -2, 2, -2, 2, 2, -1, -2, -2, + 8 ],[1, -1, 1, -1, -1, 0, 1, 0, 0, 1, + 2 ],[-2, 1, 1, 1, -1, 1, -2, 2, -2, 2, + 5 ],[-1, -2, -1, -2, -2, 1, 0, -2, -2, 1, + 10 ],[-2, -1, -1, -2, 1, 2, -2, -1, -1, -2, + 10 ],[1, -1, -1, 1, -2, -2, 2, 1, 2, -2, + 6 ],[2, 2, 1, 1, -1, 2, -2, -2, 0, -1, + 4 ],[-1, 0, -1, 1, 0, -1, 1, -1, 1, 1, + 3 ],[-2, -2, 1, 1, -1, 2, -2, 1, -2, -1, + 8 ],[1, 1, -2, 1, -2, 2, -1, 2, -1, 2, + 4 ],[2, 2, 1, -1, -2, 1, -2, -2, 1, 0, + 5 ],[-1, 2, 1, 2, -2, 1, -2, -2, 2, 2, + 5 ],[2, -2, 1, 1, -2, -2, -1, 0, -1, -2, + 8 ],[-1, 2, -3, -3, 1, -2, 1, 2, -3, -3, + 12 ],[1, 2, -1, 1, 2, -2, -2, -1, 1, 0, + 4 ],[-2, 1, 1, -2, 1, 0, 2, -2, -1, -2, + 7 ],[1, 2, -2, 1, -1, -2, -1, -2, -1, 2, + 7 ],[-1, 2, -2, -1, -2, -2, 1, 1, -2, 1, + 8 ],[1, 1, -1, -2, -1, -2, 2, 2, -2, 1, + 6 ],[1, -3, -3, 2, 1, -2, 2, -1, -2, 3, + 8 ],[-1, -1, -1, -2, -2, 6, 5, 7, 7, 6, + 0 ],[2, 1, -2, -1, -2, -2, -2, 2, 2, -1, + 8 ],[-1, -3, -1, 1, -3, 3, -3, -3, -2, 3, + 13 ],[-1, -1, -1, -1, 1, -1, -1, 0, 0, 1, + 5 ],[-1, -2, 2, 2, -1, -2, -2, 0, 2, -1, + 7 ],[-1, -2, 1, 1, 2, 2, 1, -1, -2, -2, + 6 ],[2, -1, -1, -1, -1, 2, -1, -2, 2, -2, + 7 ],[2, 1, -2, -1, -1, -2, 2, -2, 2, 1, + 6 ],[-1, 1, 2, -1, -1, 0, 2, 1, 2, 2, + 1 ],[2, 0, 1, -2, -1, -1, -2, -2, -1, -2, + 9 ],[3, 3, -1, 3, 2, 3, 3, -1, 0, -1, + 0 ],[-1, -2, -2, 1, 2, 1, 2, 0, 0, 1, + 3 ],[3, -2, 2, -1, 4, 3, -4, 2, -4, 1, + 7 ],[1, 1, 2, 2, -1, -2, 2, -2, 1, -1, + 4 ],[1, 1, -1, 2, -1, -2, -1, 2, -1, -2, + 6 ],[-1, -2, -2, 1, 1, 1, 2, 1, 0, 1, + 3 ],[-1, 1, 1, -1, 1, 0, -1, -1, 0, 1, + 3 ],[-1, 1, -2, 2, 1, 1, 1, -1, 2, -1, + 3 ],[-1, -1, -1, 1, -2, -2, -2, 2, 1, 2, + 7 ],[-1, -1, -2, 1, -2, 2, -2, 2, 1, -2, + 8 ],[1, -2, 2, -2, 1, 0, -2, -1, -2, -1, + 8 ],[-2, -1, -2, -1, -1, 1, -1, 2, 2, -1, + 7 ],[1, 2, 1, 2, 1, -1, -1, 1, 0, 0, + 0 ],[-1, 1, 0, 1, -1, 1, 1, -1, -1, 1, + 3 ],[-1, 2, 1, 1, -1, 1, 2, 2, -2, -2, + 4 ],[2, 2, 2, -1, -1, 1, 2, 2, 0, 0, + 0 ],[5, -3, 2, 4, 2, 5, -1, 0, -1, 3, + 0 ],[-1, 1, 2, -1, 2, 1, 2, 2, 0, 2, + 0 ],[1, -1, -2, -1, 1, -1, -2, -2, 2, 1, + 7 ],[2, -1, -2, 2, 1, -1, -1, 0, 1, 2, + 3 ],[1, -3, 1, 2, 1, 3, 1, 0, 2, 2, + 0 ],[-1, 1, -1, 0, 1, 0, 0, 0, 1, 1, + 1 ],[-1, 1, 1, 0, 0, 0, -1, 1, 1, -1, + 2 ],[-1, 1, 0, -1, 1, 0, -1, 1, -1, -1, + 4 ],[-1, -1, 2, -2, 1, 0, 1, -2, 1, -2, + 6 ],[-2, -1, -1, 2, -2, -2, -2, -2, 1, -2, + 12 ]]list3 = [[0, 22, 2], [1, 35, 8], [2, 16, 28], [5, 20, 7], [6, 27, 13], [7, 1, 33], [10, 25, 12], [11, 32, 18], [12, 6, 38], [15, 37, 17], [16, 26, 3], [17, 11, 23], [20, 27, 17], [21, 30, 9], [22, 0, 24], [25, 32, 2], [26, 36, 14], [27, 5, 29], [30, 37, 7], [31, 21, 19], [32, 10, 34], [35, 22, 12], [36, 31, 4], [37, 15, 39], [40, 62, 42], [41, 75, 48], [42, 56, 68], [45, 60, 47], [46, 67, 53], [47, 41, 73], [50, 65, 52], [51, 72, 58], [52, 46, 78], [55, 77, 57], [56, 66, 43], [57, 51, 63], [60, 67, 57], [61, 70, 49], [62, 40, 64], [65, 72, 42], [66, 76, 54], [67, 45, 69], [70, 77, 47], [71, 61, 59], [72, 50, 74], [75, 62, 52], [76, 71, 44], [77, 55, 79], [80, 102, 82], [81, 115, 88], [82, 96, 108], [85, 100, 87], [86, 107, 93], [87, 81, 113], [90, 105, 92], [91, 112, 98], [92, 86, 118], [95, 117, 97], [96, 106, 83], [97, 91, 103], [100, 107, 97], [101, 110, 89], [102, 80, 104], [105, 112, 82], [106, 116, 94], [107, 85, 109], [110, 117, 87], [111, 101, 99], [112, 90, 114], [115, 102, 92], [116, 111, 84], [117, 95, 119], [120, 142, 122], [121, 155, 128], [122, 136, 148], [125, 140, 127], [126, 147, 133], [127, 121, 153], [130, 145, 132], [131, 152, 138], [132, 126, 158], [135, 157, 137], [136, 146, 123], [137, 131, 143], [140, 147, 137], [141, 150, 129], [142, 120, 144], [145, 152, 122], [146, 156, 134], [147, 125, 149], [150, 157, 127], [151, 141, 139], [152, 130, 154], [155, 142, 132], [156, 151, 124], [157, 135, 159]]list2 = [[3, 10], [4, 31], [8, 15], [9, 36], [13, 0], [14, 21], [18, 5], [19, 30], [23, 11], [24, 35], [28, 16], [29, 20], [33, 1], [34, 25], [38, 6], [39, 26], [43, 50], [44, 71], [48, 55], [49, 76], [53, 40], [54, 61], [58, 45], [59, 70], [63, 51], [64, 75], [68, 56], [69, 60], [73, 41], [74, 65], [78, 46], [79, 66], [83, 90], [84, 111], [88, 95], [89, 116], [93, 80], [94, 101], [98, 85], [99, 110], [103, 91], [104, 115], [108, 96], [109, 100], [113, 81], [114, 105], [118, 86], [119, 106], [123, 130], [124, 151], [128, 135], [129, 156], [133, 120], [134, 141], [138, 125], [139, 150], [143, 131], [144, 155], [148, 136], [149, 140], [153, 121], [154, 145], [158, 126], [159, 146]]listtotal = [[0, 82, 2], [1, 95, 8], [2, 16, 88], [3, 10], [4, 91], [5, 80, 7], [6, 87, 13], [7, 1, 93], [8, 15], [9, 96], [10, 85, 12], [11, 92, 18], [12, 6, 98], [13, 0], [14, 81], [15, 97, 17], [16, 86, 3], [17, 11, 83], [18, 5], [19, 90], [20, 87, 17], [21, 90, 9], [22, 0, 84], [23, 11], [24, 95], [25, 92, 2], [26, 96, 14], [27, 5, 89], [28, 16], [29, 80], [30, 97, 7], [31, 81, 19], [32, 10, 94], [33, 1], [34, 85], [35, 82, 12], [36, 91, 4], [37, 15, 99], [38, 6], [39, 86], [40, 102, 22], [41, 115, 28], [42, 36, 108], [43, 30], [44, 111], [45, 100, 27], [46, 107, 33], [47, 21, 113], [48, 35], [49, 116], [50, 105, 32], [51, 112, 38], [52, 26, 118], [53, 20], [54, 101], [55, 117, 37], [56, 106, 23], [57, 31, 103], [58, 25], [59, 110], [60, 107, 37], [61, 110, 29], [62, 20, 104], [63, 31], [64, 115], [65, 112, 22], [66, 116, 34], [67, 25, 109], [68, 36], [69, 100], [70, 117, 27], [71, 101, 39], [72, 30, 114], [73, 21], [74, 105], [75, 102, 32], [76, 111, 24], [77, 35, 119], [78, 26], [79, 106], [80, 122, 42], [81, 135, 48], [82, 56, 128], [83, 50], [84, 131], [85, 120, 47], [86, 127, 53], [87, 41, 133], [88, 55], [89, 136], [90, 125, 52], [91, 132, 58], [92, 46, 138], [93, 40], [94, 121], [95, 137, 57], [96, 126, 43], [97, 51, 123], [98, 45], [99, 130], [100, 127, 57], [101, 130, 49], [102, 40, 124], [103, 51], [104, 135], [105, 132, 42], [106, 136, 54], [107, 45, 129], [108, 56], [109, 120], [110, 137, 47], [111, 121, 59], [112, 50, 134], [113, 41], [114, 125], [115, 122, 52], [116, 131, 44], [117, 55, 139], [118, 46], [119, 126], [120, 142, 62], [121, 155, 68], [122, 76, 148], [123, 70], [124, 151], [125, 140, 67], [126, 147, 73], [127, 61, 153], [128, 75], [129, 156], [130, 145, 72], [131, 152, 78], [132, 66, 158], [133, 60], [134, 141], [135, 157, 77], [136, 146, 63], [137, 71, 143], [138, 65], [139, 150], [140, 147, 77], [141, 150, 69], [142, 60, 144], [143, 71], [144, 155], [145, 152, 62], [146, 156, 74], [147, 65, 149], [148, 76], [149, 140], [150, 157, 67], [151, 141, 79], [152, 70, 154], [153, 61], [154, 145], [155, 142, 72], [156, 151, 64], [157, 75, 159], [158, 66], [159, 146]]ROUNDS = 4numberOfSbox = 32inputSize = 160dummycount =0filename = 'dizy-128-rest-4-' + str(ROUNDS) +'.lp'file = open(filename, 'w+')filename2 = 'dizy-128-rest-4-time' + str(ROUNDS) +'.txt'file2 = open(filename2, 'w+')def objective():    file.write("Minimize\n")    for i in range(0,(ROUNDS)*numberOfSbox):        file.write("A" + str(int(i/numberOfSbox)) + "_" + str(i%numberOfSbox))        if (i != ((ROUNDS)*numberOfSbox)-1):            file.write(" + ")    file.write("\n")def nonzeroinput():    file.write("Subject to\n")    for i in range(inputSize):        file.write("x0_" + str(i))        if(i != (inputSize-1)):            file.write(' + ')    file.write(" >= 1 \n")    def printvariables():    file.write("Binary\n")    for i in range (ROUNDS):       for j in range(numberOfSbox):           file.write("A" + str(i) + "_" +str(j) + "\n")    for i in range (ROUNDS+1):        for j in range(inputSize):            file.write("x" + str(i) + "_" + str(j) + "\n")    for i in range (ROUNDS):        for j in range(inputSize):            file.write("y" + str(i) + "_" + str(j) + "\n")    for i in range (ROUNDS):        for j in range(dummycount):            file.write("d" + str(i) + "_" + str(j) + "\n")                                    def printreducedequations(inputList,outputList,roundCount,activityofSbox):    inputRevList = inputList    outputRevList = outputList    reducedEqn = inputRevList + outputRevList    for x in range(5):        file.write("+ 5 x" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" ")        else:            file.write(" - ")    for x in range(5):        file.write("y" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" - ")        else:            file.write(" >= 0 \n")                for x in range(5):        file.write("+ 5 y" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" ")        else:            file.write(" - ")    for x in range(5):        file.write("x" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" - ")        else:            file.write(" >= 0 \n")    for i in range(len(milpredpos)):        for j in range(len(inputList)):            if(milpredpos[i][j] > 0):                file.write(" + " + str(milpredpos[i][j]) + " x" + str(roundCount) + "_" +  str(reducedEqn[j]))            if(milpredpos[i][j] < 0):                file.write(" " + str(milpredpos[i][j]) + " x" + str(roundCount) + "_" +  str(reducedEqn[j]))        for j in range(len(inputList)):            if(milpredpos[i][j + len(inputList)] > 0):                file.write(" + " + str(milpredpos[i][j + len(inputList)]) + " y" + str(roundCount) + "_" +  str(reducedEqn[j]))            if(milpredpos[i][j+ len(inputList)] < 0):                file.write(" " + str(milpredpos[i][j + len(inputList) ]) + " y" + str(roundCount) + "_" +  str(reducedEqn[j]))        if(milpredpos[i][-1] > 0):            file.write(" >= -" + str(milpredpos[i][-1]) + " \n")        if(milpredpos[i][-1] < 0):            file.write(" >= + " + str(-1 * milpredpos[i][-1]) + " \n")        if(milpredpos[i][-1] == 0):            file.write(" >= 0 \n")    def printactivityofsbox(inputList,roundCount,sboxCount):    for i in range(len(inputList)):        file.write("x" + str(roundCount) + "_" + str(inputList[i]))        if(i != len(inputList)-1):           file.write(" + ")    file.write(" - " + "A" + str(roundCount) + "_" + str(sboxCount) + " >= 0 \n")    for i in range(len(inputList)):        file.write("A" + str(roundCount) + "_" + str(sboxCount) + " - x" + str(roundCount) + "_" + str(inputList[i]) + " >= 0 \n")def printmds(roundCount):    global dummycount    dummycount = 0    for i in range (len(listtotal)):        if len(listtotal[i]) == 3:            file.write("x"    + str(roundCount+1)+ "_" + str(listtotal[i][0]) +                        " + y" + str(roundCount)  + "_" + str(listtotal[i][1])+                        " + y" + str(roundCount)  + "_" + str(listtotal[i][2])+                        " -2 d"+ str(roundCount)  + "_" + str(dummycount) + " = 0\n")             dummycount = dummycount + 1         else:            file.write("x" + str(roundCount+1) + "_" + str(listtotal[i][0]) + " -1 y" + str(roundCount) + "_" + str(listtotal[i][1]) + " = 0\n")             def restricter_init(ROUNDS):            numbers = [i for i in range(0, 160) if i % 5 not in (0, 1)]    for number in numbers:        file.write("x" +str(0) + "_" + str(number) + " = 0\n")               def restricter_final(ROUNDS):    numbers = [i for i in range(160) if i % 3 != 0 or i > 93]    for number in numbers:        file.write("x" +str(ROUNDS) + "_" + str(number) + " = 0\n")def restricter(ROUNDS):    for i in range (ROUNDS):       for j in range(numberOfSbox):           file.write("+ A" + str(i) + "_" +str(j) + " ")           if (j==(numberOfSbox-1)):               file.write(" <= 4\n")                 objective()nonzeroinput()plaintext = [i for i in range(0, inputSize)]for i in range (0,ROUNDS):    for j in range (0, numberOfSbox):        inputList =  [plaintext[5 * j], plaintext[(5 * j) + 1], plaintext[(5 * j) + 2], plaintext[(5 * j) + 3], plaintext[(5 * j) + 4]]        outputList = [plaintext[5 * j], plaintext[(5 * j) + 1], plaintext[(5 * j) + 2], plaintext[(5 * j) + 3], plaintext[(5 * j) + 4]]        printactivityofsbox(inputList, i, j)        printreducedequations(inputList,outputList, i,j)    printmds(i)     restricter_init(ROUNDS)restricter_final(ROUNDS)  printvariables()file.close()envname = "dizy-rest-4-" + str(ROUNDS) + ".log"env = Env(envname)m = read(filename,env)  obj = m.getObjective()m.optimize()time = int(m.Runtime)time = math.floor(time)file2.write(str(time) + " seconds \n")for v in m.getVars():    if v.x == 1:        print(v)        file2.write(str(v) + "\n")file2.close()