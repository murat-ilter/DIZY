from gurobipy import *import math milpredpos = [[0, 0, -1, 1, -1, -1, -1, -1, -1, 1, + 5 ],[-1, -1, -1, -1, 0, -1, -1, 1, 1, -1, + 6 ],[-1, 1, 0, -1, 0, 1, 0, -1, 1, -1, + 3 ],[3, -1, 0, -1, 0, 3, 3, -1, 3, 2, + 0 ],[-1, -2, -2, 2, -1, 1, -1, -2, -2, 1, + 9 ],[-2, 1, -2, -1, 2, -2, -1, -2, -1, -1, + 10 ],[-3, 2, 3, -1, -3, -1, -2, -3, -1, -2, + 13 ],[0, 1, -1, -1, 0, 1, -1, -1, -1, 1, + 4 ],[-2, 7, 3, -2, 6, -3, 4, 7, 6, 1, + 0 ],[1, 0, 1, 1, 0, 1, 1, 1, -1, 0, + 0 ],[1, 0, -1, -1, 0, 1, 1, 1, -1, -1, + 3 ],[-1, 1, -1, 0, 0, 1, 1, 2, 1, 2, + 0 ],[0, 0, 0, 1, 2, -1, -1, -2, 2, 2, + 2 ],[-1, -1, 1, 1, -1, 0, -1, 1, 1, 0, + 3 ],[7, 6, 7, 5, 7, -1, -2, -1, -1, -2, + 0 ],[2, 2, 1, -2, -2, 1, 2, -2, -2, -1, + 7 ],[1, -2, -1, 2, -2, 1, -1, 1, 2, -1, + 5 ],[-1, -1, -1, 0, 0, 3, 3, 3, 2, 2, + 0 ],[1, 2, 1, -2, -2, 2, -1, 2, 1, -1, + 4 ],[1, 2, 0, 2, 1, 1, -2, 2, -2, 1, + 2 ],[2, -2, 1, -2, 2, 1, 0, -2, -2, -1, + 7 ],[-2, -2, 2, 1, 2, -2, -1, -1, 2, 0, + 6 ],[-1, -1, 2, 0, 1, -1, -2, 1, 1, 2, + 3 ],[0, -2, -1, 0, -2, -1, 2, 1, 2, -2, + 6 ],[-2, 1, 3, 3, -2, -2, 3, -1, -1, 3, + 5 ],[1, 1, 2, 1, 0, -1, -1, 2, 2, 1, + 0 ],[-1, -3, 3, -3, -2, 2, -2, -1, -1, 2, + 10 ],[-2, 2, -1, 2, -2, 1, 1, -1, -2, -2, + 8 ],[2, 1, -2, 0, -2, -2, -2, -1, -1, -2, + 10 ],[3, 0, 3, -1, -1, 2, 3, 3, -1, 3, + 0 ],[0, 1, 1, 1, 0, 1, -1, 0, -1, 1, + 1 ],[3, 3, 3, -2, -2, 3, 1, 1, 3, 3, + 0 ],[2, -2, -2, 1, 2, -1, -2, -1, 2, -1, + 7 ],[2, 3, -1, -1, 3, -3, 2, 3, 1, -1, + 3 ],[-1, -2, 0, -2, 2, 2, -2, 1, 1, -2, + 7 ],[0, 2, 2, 1, 1, 1, 1, 2, 2, -2, + 0 ],[1, 2, -2, -1, -2, -1, -1, 1, -1, -2, + 8 ],[1, 0, 2, 2, 1, -2, 1, -1, -1, 2, + 2 ],[2, -1, 1, 2, -1, 1, -2, -1, 2, -2, + 5 ],[1, -1, -1, 0, 0, 2, 1, 1, 2, 1, + 0 ],[-2, -1, 0, -2, 2, 2, -2, 2, -1, -1, + 7 ],[3, 4, 6, 7, 5, -4, 2, -3, 1, 2, + 0 ],[0, 0, 0, -1, -1, 1, -1, -1, 1, 1, + 3 ],[-2, -2, 1, 2, 1, 1, 2, -2, 1, -2, + 6 ],[1, 2, 2, 0, 2, -2, -1, 1, -2, -1, + 4 ],[-2, -1, 2, -2, -1, 1, 2, 1, -2, -2, + 8 ],[1, 3, -1, 2, -1, -1, 3, 1, 2, 3, + 0 ],[2, -2, 2, -2, -1, -2, -1, 1, 1, -1, + 7 ],[-1, -1, 2, 2, 1, -1, 1, -2, -1, 2, + 4 ],[-3, 1, -3, -3, -3, -1, 2, 1, -2, 3, + 12 ],[2, 2, -2, 1, -2, -1, 0, -2, 1, -2, + 7 ],[3, 1, 0, 2, 3, 3, -2, -1, -1, -3, + 4 ],[2, 1, -3, -3, 2, -2, 1, -1, -3, 2, + 9 ],[1, 1, 0, 0, 0, -1, 1, 1, -1, -1, + 2 ],[2, -2, 1, 2, -2, 1, 2, -1, -2, -1, + 6 ],[1, -2, -2, 2, 1, 2, -1, -2, -1, 1, + 6 ],[-1, -1, -2, 1, -2, -1, 1, -1, 2, -1, + 7 ],[-2, -2, -2, 2, -1, 1, 1, 2, 0, -1, + 6 ],[7, 3, -2, 6, -2, 1, 7, -3, 6, 4, + 0 ],[-2, 2, -2, 2, 1, -1, -1, 1, 2, -2, + 6 ],[-2, -3, 3, 1, -3, -2, -1, 1, -2, -3, + 13 ],[1, -2, 0, -2, -1, 1, -2, 2, -2, 1, + 7 ],[-2, 2, 1, -2, 2, 2, 2, -1, -1, -1, + 5 ],[-1, -1, -2, -2, 1, -1, 1, -2, -2, 2, + 9 ],[-1, -2, -2, 2, 2, -1, 1, -1, -2, -2, + 9 ],[-2, -2, 1, -1, 1, -1, 2, 1, -2, -1, + 7 ],[-2, 3, -1, 3, -2, 1, -2, 3, -2, 1, + 6 ],[-1, 1, 2, 0, -1, -2, -1, 2, 1, 2, + 3 ],[0, 0, 1, -1, -1, -1, -1, -1, -1, 1, + 5 ],[-1, 2, 1, -2, -2, 1, -1, 1, 2, -2, + 6 ],[2, -2, -1, 1, -2, -2, -1, 1, -2, 2, + 8 ],[1, -1, -2, -2, -1, -1, 2, -2, -2, 1, + 9 ],[0, 0, 1, 0, 1, -1, 1, -1, 1, -1, + 2 ],[-3, 1, -3, 2, 2, 1, 2, 2, -1, 2, + 4 ],[-1, -2, -2, 0, 2, -2, -1, 1, -2, -1, + 9 ],[-1, -2, -3, -2, -3, -3, 2, -1, 1, -3, + 15 ],[-2, -1, 0, -1, -2, 2, -1, -2, -1, -2, + 10 ]]#permutedlist = [[0, 64], [1, 4], [2, 5, 10, 13, 60, 65, 70], [3, 11, 73], [4, 0, 71, 74], [5, 14], [6, 74], [7, 10, 13, 65, 70], [8, 1, 63], [9, 8, 61], [10, 69], [11, 9], [12, 13, 70], [13, 6, 68], [14, 3, 66], [15, 3], [16, 63], [17, 10, 13, 70], [18, 2, 64], [19, 14, 72], [20, 68], [21, 8], [22, 0, 74], [23, 5, 7, 10, 13, 60, 65, 70], [24, 9, 62], [25, 13], [26, 73], [27, 5, 10, 13, 65, 70], [28, 12, 69], [29, 4, 67], [30, 79], [31, 19], [32, 20, 25, 28, 75, 80, 85], [33, 26, 88], [34, 15, 86, 89], [35, 29], [36, 89], [37, 25, 28, 80, 85], [38, 16, 78], [39, 23, 76], [40, 84], [41, 24], [42, 28, 85], [43, 21, 83], [44, 18, 81], [45, 18], [46, 78], [47, 25, 28, 85], [48, 17, 79], [49, 29, 87], [50, 83], [51, 23], [52, 15, 89], [53, 20, 22, 25, 28, 75, 80, 85], [54, 24, 77], [55, 28], [56, 88], [57, 20, 25, 28, 80, 85], [58, 27, 84], [59, 19, 82], [60, 94], [61, 34], [62, 35, 40, 43, 90, 95, 100], [63, 41, 103], [64, 30, 101, 104], [65, 44], [66, 104], [67, 40, 43, 95, 100], [68, 31, 93], [69, 38, 91], [70, 99], [71, 39], [72, 43, 100], [73, 36, 98], [74, 33, 96], [75, 33], [76, 93], [77, 40, 43, 100], [78, 32, 94], [79, 44, 102], [80, 98], [81, 38], [82, 30, 104], [83, 35, 37, 40, 43, 90, 95, 100], [84, 39, 92], [85, 43], [86, 103], [87, 35, 40, 43, 95, 100], [88, 42, 99], [89, 34, 97], [90, 109], [91, 49], [92, 50, 55, 58, 105, 110, 115], [93, 56, 118], [94, 45, 116, 119], [95, 59], [96, 119], [97, 55, 58, 110, 115], [98, 46, 108], [99, 53, 106], [100, 114], [101, 54], [102, 58, 115], [103, 51, 113], [104, 48, 111], [105, 48], [106, 108], [107, 55, 58, 115], [108, 47, 109], [109, 59, 117], [110, 113], [111, 53], [112, 45, 119], [113, 50, 52, 55, 58, 105, 110, 115], [114, 54, 107], [115, 58], [116, 118], [117, 50, 55, 58, 110, 115], [118, 57, 114], [119, 49, 112]]permutedlist = [[0, 4, 67], [1, 8], [2, 63], [3, 14, 60], [4, 1, 74], [5, 2, 68, 72], [6, 13], [7, 68], [8, 9, 66], [9, 11, 69], [10, 2, 7, 62, 68, 72], [11, 3], [12, 73], [13, 2, 7, 12, 62, 68, 70, 72], [14, 5, 64], [15, 2, 68], [16, 9], [17, 69], [18, 8, 61], [19, 0, 63], [20, 2, 7, 68, 72], [21, 14], [22, 74], [23, 13, 65], [24, 10, 73], [25, 2, 7, 12, 62, 68, 72], [26, 4], [27, 64], [28, 3, 71], [29, 4, 6, 67], [30, 19, 82], [31, 23], [32, 78], [33, 29, 75], [34, 16, 89], [35, 17, 83, 87], [36, 28], [37, 83], [38, 24, 81], [39, 26, 84], [40, 17, 22, 77, 83, 87], [41, 18], [42, 88], [43, 17, 22, 27, 77, 83, 85, 87], [44, 20, 79], [45, 17, 83], [46, 24], [47, 84], [48, 23, 76], [49, 15, 78], [50, 17, 22, 83, 87], [51, 29], [52, 89], [53, 28, 80], [54, 25, 88], [55, 17, 22, 27, 77, 83, 87], [56, 19], [57, 79], [58, 18, 86], [59, 19, 21, 82], [60, 34, 97], [61, 38], [62, 93], [63, 44, 90], [64, 31, 104], [65, 32, 98, 102], [66, 43], [67, 98], [68, 39, 96], [69, 41, 99], [70, 32, 37, 92, 98, 102], [71, 33], [72, 103], [73, 32, 37, 42, 92, 98, 100, 102], [74, 35, 94], [75, 32, 98], [76, 39], [77, 99], [78, 38, 91], [79, 30, 93], [80, 32, 37, 98, 102], [81, 44], [82, 104], [83, 43, 95], [84, 40, 103], [85, 32, 37, 42, 92, 98, 102], [86, 34], [87, 94], [88, 33, 101], [89, 34, 36, 97], [90, 49, 112], [91, 53], [92, 108], [93, 59, 105], [94, 46, 119], [95, 47, 113, 117], [96, 58], [97, 113], [98, 54, 111], [99, 56, 114], [100, 47, 52, 107, 113, 117], [101, 48], [102, 118], [103, 47, 52, 57, 107, 113, 115, 117], [104, 50, 109], [105, 47, 113], [106, 54], [107, 114], [108, 53, 106], [109, 45, 108], [110, 47, 52, 113, 117], [111, 59], [112, 119], [113, 58, 110], [114, 55, 118], [115, 47, 52, 57, 107, 113, 117], [116, 49], [117, 109], [118, 48, 116], [119, 49, 51, 112]]ROUNDS = 4numberOfSbox = 24inputSize = 120dummycount =0filename = 'dizy-80-' + str(ROUNDS) +'.lp'file = open(filename, 'w+')filename2 = 'dizy-80-time-lin' + str(ROUNDS) +'.txt'file2 = open(filename2, 'w+')def objective():    file.write("Minimize\n")    for i in range(0,(ROUNDS)*numberOfSbox):        file.write("A" + str(int(i/numberOfSbox)) + "_" + str(i%numberOfSbox))        if (i != ((ROUNDS)*numberOfSbox)-1):            file.write(" + ")    file.write("\n")def nonzeroinput():    file.write("Subject to\n")    for i in range(inputSize):        file.write("x0_" + str(i))        if(i != (inputSize-1)):            file.write(' + ')    file.write(" >= 1 \n")    def printvariables():    file.write("Binary\n")    for i in range (ROUNDS):       for j in range(numberOfSbox):           file.write("A" + str(i) + "_" +str(j) + "\n")    for i in range (ROUNDS+1):        for j in range(inputSize):            file.write("x" + str(i) + "_" + str(j) + "\n")    for i in range (ROUNDS):        for j in range(inputSize):            file.write("y" + str(i) + "_" + str(j) + "\n")    for i in range (ROUNDS):        for j in range(dummycount):            file.write("d" + str(i) + "_" + str(j) + "\n")                        def printreducedequations(inputList,outputList,roundCount,activityofSbox):    inputRevList = inputList    outputRevList = outputList    reducedEqn = inputRevList + outputRevList    for x in range(5):        file.write("+ 5 x" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" ")        else:            file.write(" - ")    for x in range(5):        file.write("y" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" - ")        else:            file.write(" >= 0 \n")                for x in range(5):        file.write("+ 5 y" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" ")        else:            file.write(" - ")    for x in range(5):        file.write("x" + str(roundCount) + "_" +  str(inputList[x]))        if(x!=4):            file.write(" - ")        else:            file.write(" >= 0 \n")    for i in range(len(milpredpos)):        for j in range(len(inputList)):            if(milpredpos[i][j] > 0):                file.write(" + " + str(milpredpos[i][j]) + " x" + str(roundCount) + "_" +  str(reducedEqn[j]))            if(milpredpos[i][j] < 0):                file.write(" " + str(milpredpos[i][j]) + " x" + str(roundCount) + "_" +  str(reducedEqn[j]))        for j in range(len(inputList)):            if(milpredpos[i][j + len(inputList)] > 0):                file.write(" + " + str(milpredpos[i][j + len(inputList)]) + " y" + str(roundCount) + "_" +  str(reducedEqn[j]))            if(milpredpos[i][j+ len(inputList)] < 0):                file.write(" " + str(milpredpos[i][j + len(inputList) ]) + " y" + str(roundCount) + "_" +  str(reducedEqn[j]))        if(milpredpos[i][-1] > 0):            file.write(" >= -" + str(milpredpos[i][-1]) + " \n")        if(milpredpos[i][-1] < 0):            file.write(" >= + " + str(-1 * milpredpos[i][-1]) + " \n")        if(milpredpos[i][-1] == 0):            file.write(" >= 0 \n")    def printactivityofsbox(inputList,roundCount,sboxCount):    for i in range(len(inputList)):        file.write("x" + str(roundCount) + "_" + str(inputList[i]))        if(i != len(inputList)-1):           file.write(" + ")    file.write(" - " + "A" + str(roundCount) + "_" + str(sboxCount) + " >= 0 \n")    for i in range(len(inputList)):        file.write("A" + str(roundCount) + "_" + str(sboxCount) + " - x" + str(roundCount) + "_" + str(inputList[i]) + " >= 0 \n")def printmds(roundCount):    global dummycount    dummycount = 0    for i in range (len(permutedlist)):        if len(permutedlist[i]) == 8:            file.write("x"    + str(roundCount+1)+ "_" + str(permutedlist[i][0]))            for j in range (1,len(permutedlist[i])):                file.write(" + y" + str(roundCount)  + "_" + str(permutedlist[i][j]))            for j in range (1,4):               file.write(" -" + str(pow(2,j)) + " d"+ str(roundCount)  + "_" + str(dummycount))               dummycount = dummycount + 1             file.write(" = 0\n")                 elif len(permutedlist[i]) >= 4 and len(permutedlist[i]) <= 7 :            file.write("x"    + str(roundCount+1)+ "_" + str(permutedlist[i][0]))            for j in range (1,len(permutedlist[i])):                file.write(" + y" + str(roundCount)  + "_" + str(permutedlist[i][j]))            for j in range (1,3):               file.write(" -" + str(pow(2,j)) + " d"+ str(roundCount)  + "_" + str(dummycount))               dummycount = dummycount + 1             file.write(" = 0\n")                   elif len(permutedlist[i]) == 3:            file.write("x"    + str(roundCount+1)+ "_" + str(permutedlist[i][0]))            for j in range (1,len(permutedlist[i])):                file.write(" + y" + str(roundCount)  + "_" + str(permutedlist[i][j]))            for j in range (1,2):               file.write(" -" + str(pow(2,j)) + " d"+ str(roundCount)  + "_" + str(dummycount))                dummycount = dummycount + 1            file.write(" = 0\n")          elif len(permutedlist[i]) == 2:            file.write("x" + str(roundCount+1) + "_" + str(permutedlist[i][0]) + " -1 y" + str(roundCount) + "_" + str(permutedlist[i][1]) + " = 0\n")            '''def restricter(ROUNDS):    for i in range (ROUNDS):       for j in range(numberOfSbox):           file.write("+ A" + str(i) + "_" +str(j) + " ")           if (j==(numberOfSbox-1)):               file.write(" <= 4\n")'''      def restricter_initial(ROUNDS):    numbers = [i for i in range(120) if i % 3 != 0 or i > 93]    for number in numbers:        file.write("x" +str(0) + "_" + str(number) + " = 0\n")def restricter_final(ROUNDS):    numbers = [i for i in range(120) if i % 3 != 0 or i > 93]    for number in numbers:        file.write("x" +str(ROUNDS) + "_" + str(number) + " = 0\n")        objective()nonzeroinput()plaintext = [i for i in range(0, inputSize)]for i in range (0,ROUNDS):    for j in range (0, numberOfSbox):        inputList =  [plaintext[5 * j], plaintext[(5 * j) + 1], plaintext[(5 * j) + 2], plaintext[(5 * j) + 3], plaintext[(5 * j) + 4]]        outputList = [plaintext[5 * j], plaintext[(5 * j) + 1], plaintext[(5 * j) + 2], plaintext[(5 * j) + 3], plaintext[(5 * j) + 4]]        printactivityofsbox(inputList, i, j)        printreducedequations(inputList,outputList, i,j)    printmds(i)       restricter_initial(ROUNDS)   restricter_final(ROUNDS)printvariables()file.close()envname = "dizy-restricted-" + str(ROUNDS) + ".log"env = Env(envname)m = read(filename,env)  obj = m.getObjective()m.optimize()time = int(m.Runtime)time = math.floor(time)file2.write(str(time) + " seconds \n")for v in m.getVars():    if v.x == 1:        print(v)        file2.write(str(v) + "\n")file2.close()